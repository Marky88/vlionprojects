package com.vlion.spark.query20210204haiwai

import java.io.{BufferedWriter, OutputStreamWriter}

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.sql.{Dataset, SparkSession}
import java.text.SimpleDateFormat
import java.util.Date

import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.{FileSystem, Path}

/**
 * @description:
 * @author: malichun
 * @time: 2021/2/4/0004 18:30
 *        日期：1.1-2.3
 * 1.按dspid统计每天的曝光、消耗（sum（$7）/ 1000）
 * 2.按照adxid统计每天的曝光、消耗（sum（$8）/ 1000）
 *
 *        日志里面没有adxid，需要你通过媒体id去关联到 adxid
 *
 */
case class Imp(time:String, dspId:String, appId:String, real_price:Double, dsp_price:Double)
object ImpQuery {
    def main(args: Array[String]): Unit = {
        val conf = new SparkConf().setAppName("TEST_IP_CITY").setMaster("local[*]")
        val sc = new SparkContext(conf)
        val spark = SparkSession.builder().enableHiveSupport().getOrCreate()
        import spark.implicits._

        val mediaRdd = sc.makeRDD(List(
            ("30084","10042"),
            ("30085","10053"),
            ("30086","20551"),
            ("30087","20553"),
            ("30088","20553"),
            ("30089","20553"),
            ("30090","20553"),
            ("30091","20553"),
            ("30092","20556"),
            ("30093","20556"),
            ("30094","20556"),
            ("30095","20557"),
            ("30096","20553"),
            ("30097","20553"),
            ("30098","20559"),
            ("30099","20559"),
            ("30100","20559"),
            ("30101","20559"),
            ("30102","20558"),
            ("30103","20553"),
            ("30104","20561"),
            ("30105","20553"),
            ("30106","20553"),
            ("30107","20553"),
            ("30108","20553"),
            ("30109","20553"),
            ("30110","20564"),
            ("30111","20568"),
            ("30112","20573"),
            ("30113","20558"),
            ("30114","20576"),
            ("30115","20580"),
            ("30116","20583"),
            ("30117","20574"),
            ("30118","20574"),
            ("30119","20574"),
            ("30120","20574"),
            ("30121","20574"),
            ("30122","20574"),
            ("30123","20574"),
            ("30124","20574"),
            ("30125","20574"),
            ("30126","20574"),
            ("30127","20574"),
            ("30128","20586"),
            ("30129","20586"),
            ("30130","20553"),
            ("30131","20587"),
            ("30132","20587"),
            ("30133","20587"),
            ("30134","20553"),
            ("30135","20589"),
            ("30136","20589"),
            ("30137","20553"),
            ("30138","20558"),
            ("30139","20558"),
            ("30140","20590"),
            ("30141","20589"),
            ("30142","20592"),
            ("30143","20592"),
            ("30144","20592"),
            ("30145","20592"),
            ("30146","20592"),
            ("30147","20592"),
            ("30148","20588"),
            ("30149","20588"),
            ("30150","20594"),
            ("30151","20594"),
            ("30152","20594"),
            ("30153","20594"),
            ("30154","20594"),
            ("30155","20594"),
            ("30156","20594"),
            ("30157","20553"),
            ("30158","20553"),
            ("30159","20553"),
            ("30160","20553"),
            ("30161","20553"),
            ("30162","20553"),
            ("30163","20553"),
            ("30164","20553"),
            ("30165","20553"),
            ("30166","20553"),
            ("30167","20553"),
            ("30168","20553"),
            ("30169","20553"),
            ("30170","20595"),
            ("30171","20553"),
            ("30172","20561"),
            ("30173","20553"),
            ("30174","20553"),
            ("30175","20553"),
            ("30176","20553"),
            ("30177","20598"),
            ("30178","20553"),
            ("30179","20602"),
            ("30180","20602"),
            ("30181","20603"),
            ("30182","20603"),
            ("30183","20605"),
            ("30184","20605"),
            ("30185","20606"),
            ("30186","20606"),
            ("30187","20607"),
            ("30188","20607"),
            ("30189","20553"),
            ("30190","20598"),
            ("30191","20607"),
            ("30192","20608"),
            ("30193","20608"),
            ("30194","20606"),
            ("30195","20607"),
            ("30196","20613"),
            ("30197","20613"),
            ("30198","20614"),
            ("30199","20614"),
            ("30200","20614"),
            ("30201","20606"),
            ("30202","20606"),
            ("30203","20616"),
            ("30204","20616"),
            ("30205","20608"),
            ("30206","20608"),
            ("30207","20617"),
            ("30208","20617"),
            ("30209","20615"),
            ("30210","20615"),
            ("30211","20615"),
            ("30212","20618"),
            ("30213","20618"),
            ("30214","20618"),
            ("30215","20619"),
            ("30216","20619"),
            ("30217","20621"),
            ("30218","20621"),
            ("30219","20623"),
            ("30220","20624"),
            ("30221","20624"),
            ("30222","20623"),
            ("30223","20629"),
            ("30224","20629"),
            ("30225","20630"),
            ("30226","20630"),
            ("30227","20634"),
            ("30228","20634"),
            ("30229","20553"),
            ("30230","20553"),
            ("30231","20635"),
            ("30232","20635"),
            ("30233","20637"),
            ("30234","20640"),
            ("30235","20639"),
            ("30236","20553"),
            ("30237","20643"),
            ("30238","20642"),
            ("30239","20644"),
            ("30240","20645"),
            ("30241","20646"),
            ("30242","20647"),
            ("30243","20649"),
            ("30244","20553"),
            ("30245","20648"),
            ("30246","20650"),
            ("30247","20553"),
            ("30248","20653"),
            ("30249","20654"),
            ("30250","20655"),
            ("30251","20656"),
            ("30252","20655"),
            ("30253","20657"),
            ("30254","20658"),
            ("30255","20643"),
            ("30256","20592"),
            ("30257","20592"),
            ("30258","20592"),
            ("30259","20640"),
            ("30260","20640"),
            ("30261","20606"),
            ("30262","20606"),
            ("30263","20643"),
            ("30264","20643"),
            ("30265","20607"),
            ("30266","20607"),
            ("30267","20639"),
            ("30268","20639"),
            ("30269","20639"),
            ("30270","20645"),
            ("30271","20603"),
            ("30272","20646"),
            ("30273","20646"),
            ("30274","20646"),
            ("30275","20640"),
            ("30276","20640"),
            ("30277","20638"),
            ("30278","20638"),
            ("30279","20638"),
            ("30280","20638"),
            ("30281","20638"),
            ("30282","20638"),
            ("30283","20638"),
            ("30284","20638"),
            ("30285","20644"),
            ("30286","20638"),
            ("30287","20638"),
            ("30288","20640"),
            ("30289","20640"),
            ("30290","20639"),
            ("30291","20553"),
            ("30292","20553"),
            ("30293","20553"),
            ("30294","20638"),
            ("30295","20645"),
            ("30296","20645"),
            ("30297","20645"),
            ("30298","20654"),
            ("30299","20654"),
            ("30300","20637"),
            ("30301","20637"),
            ("30302","20607"),
            ("30303","20607"),
            ("30304","20607"),
            ("30305","20642"),
            ("30306","20642"),
            ("30307","20655"),
            ("30308","20655"),
            ("30309","20592"),
            ("30310","20592"),
            ("30311","20660"),
            ("30312","20660"),
            ("30313","20644"),
            ("30314","20644"),
            ("30315","20657"),
            ("30316","20656"),
            ("30317","20646"),
            ("30318","20661"),
            ("30319","20661"),
            ("30320","20661"),
            ("30321","20665"),
            ("30322","20665"),
            ("30323","20665"),
            ("30324","20606"),
            ("30325","20606"),
            ("30326","20649"),
            ("30327","20649"),
            ("30328","20649"),
            ("30329","20649"),
            ("30330","20650"),
            ("30331","20650"),
            ("30332","20653"),
            ("30333","20653"),
            ("30334","20656"),
            ("30335","20656"),
            ("30336","20657"),
            ("30337","20657")
        ))
        val mediaDF = mediaRdd.toDF("id","user_id")

        val impDS = sc.textFile("hdfs://www.bigdata02.com:8020/tmp/test/haiwai_imp/*/*")
            .map(line => {
                val arr = line split "\t"

                val formatter = new SimpleDateFormat("yyyy-MM-dd")
                val str = formatter.format(new Date((arr(1)+"000").toLong))

                Imp(str,
                    arr(3),
                    arr(4),
                    if(arr(6) matches "[\\.\\d]*") arr(6).toDouble else 0.0,
                    if(arr(7) matches "[\\.\\d]*") arr(7).toDouble else 0.0
                )
            }).toDS()

        mediaDF.createOrReplaceTempView("media")
        impDS.createOrReplaceTempView("imp")
        spark.sql(
            """
              |select
              | time,dspId,count(1),sum(real_price)/1000
              |from
              |imp
              |group by time,dspId
              |
              |""".stripMargin).rdd.saveAsTextFile("file:///root/haiwai/res_dsp")

        spark.sql(
            """
              |select
              | t1.time,t2.user_id,count(1),sum(dsp_price)/1000
              |from
              |imp t1
              |inner join
              |media t2
              |on t1.appId = t2.id
              |group by t1.time,t2.user_id
              |
              |""".stripMargin).rdd.saveAsTextFile("file:///root/haiwai/res_adx")

        //


        val rdd = sc.textFile("/tmp/test/20210126_media_resp/media_res_result/*/*")
        rdd.distinct(30).mapPartitionsWithIndex((index,iter) => {

            val configuration = new Configuration()
            val fs = FileSystem.get(configuration)
            val outputStream1 = fs.create(new Path(s"hdfs://www.bigdata02.com:8020/tmp/test/20210126_media_resp/media_res_result2/${index}_1.txt"))

            val outputStream2 = fs.create(new Path(s"hdfs://www.bigdata02.com:8020/tmp/test/20210126_media_resp/media_res_result2/${index}_2.txt"))

            val bufferWriter1 = new BufferedWriter(new OutputStreamWriter(outputStream1))
            val bufferWriter2 = new BufferedWriter(new OutputStreamWriter(outputStream2))

            iter.foreach(line => {
                if (line != null) {
                    val arr = line.split("\t")
                    val type_ = arr(0)
                    val id = arr(1)
                    if(type_ == "1"){
                        bufferWriter1.write(id)
                        bufferWriter1.newLine()
                        bufferWriter1.flush()
                    }else{
                        bufferWriter2.write(id)
                        bufferWriter2.newLine()
                        bufferWriter2.flush()
                    }

                }
            })
            bufferWriter1.close()
            outputStream1.close()

            bufferWriter2.close()
            outputStream2.close()

            fs.close()

            List(s"hdfs://www.bigdata02.com:8020/tmp/test/20210126_media_resp/media_res_result2/${index}_1.txt",
                s"hdfs://www.bigdata02.com:8020/tmp/test/20210126_media_resp/media_res_result2/${index}_2.txt").iterator
        })



        sc.stop()




    }
}
